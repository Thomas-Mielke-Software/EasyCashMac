#!/bin/bash

# read config
echo "Reading myappleid.config"
. ./myappleid.config
if [ -z "$appleid" ]
then
        echo "Error: Please add an entry 'appleid=<your_appleid_here>' to myappleid.config"
        exit 1
fi
if [ -z "$aspw" ]
then
        echo "Error: Please add an entry 'aspw=<your_app_specific_password_here>' to myappleid.config"
        exit 1
fi
echo "Notarisation will use apple id '$appleid'"

# unzip archive to EasyCash&Tax.app folder
echo "Unzipping original package..."
rm -rf EasyCash\&Tax.app
unzip -q easyct-2.38.3-unsigned.zip

# delete symlinks that would prevent Gatekeeper/spctl from passing otherwise
echo "Deleting symlinks"
rm EasyCash\&Tax.app/Contents/SharedSupport/easyct/support/easyct/drive_c/users/crossover/Downloads
rm EasyCash\&Tax.app/Contents/SharedSupport/easyct/support/easyct/drive_c/users/crossover/Templates

# replace EC&T binaries and Info.plist with current versions
cp WindowsBinaries/* EasyCash\&Tax.app/Contents/SharedSupport/easyct/support/easyct/drive_c/Program\ Files/EasyCash\&Tax
cp Info.plist EasyCash\&Tax.app/Contents

# add icon
iconutil -c icns $(pwd)/EasyCash.iconset
cp EasyCash.icns EasyCash\&Tax.app/Contents/Resources
rm EasyCash.icns

# sign the package using Codeweavers script
echo "Signing package..."
./sign_codeV4 $(pwd)/EasyCash\&Tax.app

# archive signed package to a zip for notarisation
ditto -c -k --keepParent EasyCash\&Tax.app EasyCT.zip

# prepare option if team id was set
if [ -z "$ascprov" ]
then
	ascprovoption=
else
	ascprovoption="--asc-provider"
fi

output=$(xcrun altool --notarize-app --primary-bundle-id de.easyct.easyct $ascprovoption $ascprov -u "$appleid" -p "$aspw" --file EasyCT.zip)

ticket_id=$(echo "$output" | grep RequestUUID | awk '{print $3}')

if [ -z "$ticket_id" ]
then
	echo "Error: No ticket id was returned.\n\n$output"
        exit 1
fi

echo "Notarization ticket: $ticket_id"
echo "Waiting 60 seconds for Apple Notarizer to finish processing..."
sleep 60
xcrun altool --notarization-info "$ticket_id" -u "$appleid" -p "$aspw"

echo "Stapeling..."
output=$(xcrun stapler staple EasyCash\&Tax.app)
echo $output
stapling_worked=$(echo "$output" | grep "The staple and validate action worked")
if [ -z "$stapling_worked" ]
then
        echo "Error: stapling didn't work, it seems. Try to run 'xcrun stapler staple EasyCash\\&Tax.app' and zip EasyCT4Mac.zip manually."
        exit 1
fi

echo "Checking stapled EasyCash&Tax.app folder using spctl -a..."
spctl --assess --type open --context context:primary-signature --verbose EasyCash\&Tax.app

echo "Final packaging to EasyCT4Mac.zip..."
rm EasyCT4Mac.zip
ditto -c -k --keepParent EasyCash\&Tax.app EasyCT4Mac.zip

# clean-up temporary zip, used for notarisation
rm EasyCT.zip
