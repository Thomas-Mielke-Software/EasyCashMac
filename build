# read config
echo "Reading myappleid.config"
. ./myappleid.config
if [ -z "$appleid" ]
then
        echo "Error: Please add an entry 'appleid=<your_appleid_here>' to myappleid.config"
        exit 1
fi
if [ -z "$aspw" ]
then
        echo "Error: Please add an entry 'aspw=<your_app_specific_password_here>' to myappleid.config"
        exit 1
fi
echo "Notarisation will use apple id '$appleid'"

# remove remnants of previous build
rm EasyCT.zip

# unzip archive to EasyCash&Tax.app folder
echo "Unzipping original package..."
rm -rf EasyCash\&Tax.app
if [ -z "$1" ]
then
	packetzipfile="easyct-2.53.0-unsigned-v4.zip"
    echo "No parameter submitted. Using $packetzipfile instead."
fi
unzip -q "$packetzipfile"

# delete symlinks that would prevent Gatekeeper/spctl from passing otherwise
echo "Deleting dot-files and removing quarantine attributes"
find "EasyCash&Tax.app" -name '.*' -not -name '.update-timestamp' -not -name '.version' -delete
xattr -r -d com.apple.quarantine "EasyCash&Tax.app"

export CX_ROOT="`pwd`/EasyCash&Tax.app/Contents/SharedSupport/easyct"
export WINEPREFIX="$CX_ROOT/support/easyct64"

# replace EC&T binaries with current version
echo "replacing EC&T binaries with current version"
rm "$WINEPREFIX/drive_c/Program Files (x86)/EasyCash&Tax/*.ecf"
rm "$WINEPREFIX/drive_c/Program Files (x86)/EasyCash&Tax/*.png"
cp WindowsBinaries/* "$WINEPREFIX/drive_c/Program Files (x86)/EasyCash&Tax/"
echo "replacing Austrian and German tax forms in package"
cp formula/at/* "$WINEPREFIX/drive_c/at"
cp formula/de/* "$WINEPREFIX/drive_c/de"

# Update version number in Info.plist file
INFOPLIST="`pwd`/EasyCash&Tax.app/Contents/Info.plist"
VERSION_NUM=3.0.0

defaults write "$INFOPLIST" CFBundleVersion -string $VERSION_NUM
defaults write "$INFOPLIST" CFBundleShortVersionString -string $VERSION_NUM
defaults write "$INFOPLIST" CFBundleGetInfoString -string "$VERSION_NUM, Copyright Â© 2024 Thomas Mielke"
plutil -convert xml1 "$INFOPLIST"

# refresh package (essentially from portjump refresh script) -- updates files database. Explanation: 
# In the easyct64 folder is a file named 'files'. This records all the directories and files included in the bottle, and the timestamps of the files.
# This is then used to compare against the local version of the bottle on the end user's machine, to identify if there are updates that need to be
# applied (copying or linking new files, removing old files, etc). The command I provided basically just updates the 'files' file. It can be simplified
# to a single line:

# Ensure permissions are correct on files
find "$WINEPREFIX" -type f -print0 | xargs -0 chmod a+r
find "$WINEPREFIX" -type d -print0 | xargs -0 chmod a+rx

"$CX_ROOT/bin/wineprefixcreate" --snapshot

# sign the package using Codeweavers script
echo "Signing package..."
./sign_portjump "$(pwd)/EasyCash&Tax.app"  # new signscript from PortJump Toolkit (unauthorised redistribution prohibited :-/ )

# archive signed package to a zip for notarisation
echo "zipping package for notarisation..."
ditto -c -k --keepParent EasyCash\&Tax.app EasyCT.zip

# prepare option if team id was set
if [ -z "$ascprov" ]
then
	ascprovoption=
else
	ascprovoption="--asc-provider"
	teamidoption="--team-id"
fi

echo "notarising app..."

# ___ old notarization process using altool ___
#output=$(xcrun notarytool --notarize-app --primary-bundle-id de.easyct.easyct $ascprovoption $ascprov -u "$appleid" -p "$aspw" --file EasyCT.zip)
#
#ticket_id=$(echo "$output" | grep RequestUUID | awk '{print $3}')
#
#if [ -z "$ticket_id" ]
#then
#	echo "Error: No ticket id was returned.\n\n$output"
#        exit 1
#fi
#
#echo "Notarisation ticket: $ticket_id"
#echo "Waiting 120 seconds for Apple Notarizer to finish processing..."
#sleep 120
#xcrun notarytool --notarization-info "$ticket_id" -u "$appleid" -p "$aspw"
#echo "xcrun notarytool --notarization-info \"$ticket_id\" -u \"$appleid\" -p \"$aspw\""

# ___ new notarisation process using notarytool ___
xcrun notarytool submit EasyCT.zip --apple-id "$appleid" $teamidoption $ascprov --password "$aspw" --wait

echo "Stapeling..."
output=$(xcrun stapler staple "EasyCash&Tax.app")
echo $output
stapling_worked=$(echo "$output" | grep "The staple and validate action worked")
if [ -z "$stapling_worked" ]
then
	echo "test"
        echo "Error: stapling didnt work, it seems. Try to run"
	echo "   xcrun stapler staple EasyCash\\&Tax.app"
	echo "Then check notarisation with"
	echo "   spctl --assess --type open --context context:primary-signature --verbose EasyCash\\&Tax.app"
	echo "Finally zip the package using"
	echo "   ditto -c -k --keepParent EasyCash\\&Tax.app EasyCT4Mac.zip"
        exit 1
fi

echo "Checking stapled EasyCash&Tax.app folder using spctl -a..."
spctl --assess --type open --context context:primary-signature --verbose EasyCash\&Tax.app

echo "Final packaging to EasyCT4Mac.zip..."
rm EasyCT4Mac.zip
ditto -c -k --keepParent EasyCash\&Tax.app EasyCT4Mac.zip

# clean-up temporary zip, used for notarisation
rm EasyCT.zip
